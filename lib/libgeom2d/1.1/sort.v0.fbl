//___________ SORTING


var sortBuf = new(SeqOf(double));

double function xcoord(geom2d:Point p)
{
   return p.geom:x;
}

double function ycoord(geom2d:Point p)
{
   return p.geom:y;
}

var sortPointsBuf = new(SeqOf(int));

sort:SortedObs function sortX(SeqOf(geom2d:Point) pnts)
{
   return sort:mkSortedObs(pnts~SeqOf(ob),xcoord[geom2d:Point]~Function(double,ob));

}


sort:SortedObs function sortY(SeqOf(geom2d:Point) pnts)
{
   return sort:mkSortedObs(pnts~SeqOf(ob),ycoord[geom2d:Point]~Function(double,ob));

}

// a primitive algorithm for point identity:
// first group by X (modulo epsilon)
// 
// within each X group, subgroup by Y (modulo epsilon)

SeqOf(SeqOf(int)) function groupPoints(SeqOf(geom2d:Point) pnts,double mindist)
{
   var sort:SortedObs srtx,srty,SeqOf(SeqOf(int)) xg,yg,rs,
       SeqOf(int) prmx,prmy,cxg,cyg,cyg1,
	   int ln,lncxg,lncyg,i0,i1,cye,pr0,pr1,lnyg,i,j,k,
	   geom2d:Point p0,p1,SeqOf(geom2d:Point) pg;
   srtx = sortX(pnts);
   xg = sort:groupByValue(srtx,mindist);
   ln = length(xg);
   rs = new(SeqOf(SeqOf(int)));
   prmx = srtx.sort:permutation;
   for (i=0;i<ln;i++)
       {
	   cxg = xg[i];
	   lncxg  = length(cxg);
	   if (lncxg == 1) push(rs,[prmx[cxg[0]]]);
	   else
	   if (lncxg == 2) 
	      {
		  i0 = cxg[0];
		  i1 = cxg[1];
		  pr0 = prmx[i0];
		  pr1 = prmx[i1];
		  p0 = pnts[pr0];
		  p1 = pnts[pr1];
		  if (distance(p0,p1) <= mindist) push(rs,[pr0,pr1]);
		  else 
		     {
			 push(rs,[pr0]);
			 push(rs,[pr1]);
			 }
		  }
	   else
	      {
		  pg = sort:select(srtx,cxg)~SeqOf(geom2d:Point);
		  srty = sortY(pg);
		  prmy = srty.sort:permutation;
          yg = sort:groupByValue(srty,mindist);
		  lnyg = length(yg);
		  for (j=0;j<lnyg;j++)
		      {
			  cyg = yg[j];
			  // this has indices into prmy; need to produce indices into prmx
			  cyg1 = new(SeqOf(int));
			  lncyg = length(cyg);
			  for (k=0;k<lncyg;k++)
			      {
				  cye = cyg[k];// this is an index into prmy
				  push(cyg1,prmx[cxg[prmy[cye]]]);
				  }
			   push(rs, cyg1);
			   }
		  }
	   }
	return rs;
}

			  






/*

install(namespace('sort'));
install(namespace('geom2d'));
install(namespace('libgeom2d'));
push(path,namespace('libgeom2d'));

//test:

void function pgp(SeqOf(SeqOf(int)) g,SeqOf(geom2d:Point) pnts)
{
   var int ln,i,j,lncg,SeqOf(int) cg;
   ln = length(g);
   for (i=0;i<ln;i++)
       {
	   cg = g[i];
	   lncg = length(cg);
	   write('[');
	   for (j=0;j<lncg;j++) write(' ',pnts[cg[j]],' ');
	   writeln(']');
	   }
}


void function ppg(SeqOf(int) g,SeqOf(geom2d:Point) pnts)
{
   var int ln,i,j;
   ln = length(g);
   for (i=0;i<ln;i++)
       {
       write(' ',pnts[g[i]],' ');
	   }
}

var p0 = mkPoint(1,1);

var p1 = mkPoint(1,1);
//var p1 = mkPoint(1,2);

var p2 = mkPoint(1,2.01);


var p3 = mkPoint(1,2.02);

var p4 = mkPoint(2,0);
var p5 = mkPoint(2,1);
var p6 = mkPoint(2,1);

var p7 = mkPoint(3,0);

var SeqOf(geom2d:Point) pnts;
var SeqOf(SeqOf(int)) g;

var mindist = 0.1;

pnts = [p0,p1,p2,p3,p4,p5,p6,p7];
g = groupPoints(pnts,0.1);
g = groupPoints(pnts,0.0001);
pgp(g,pnts);

pnts = [p7,p0,p6,p1,p5,p2,p4,p3];
g=groupPoints(pnts,0.1);
pgp(g,pnts);


[p7,p0,p6,p1,p5,p2,p4,p3];
// print grouped points


_________________________

install(namespace('sort'));
install(namespace('geom2d'));
install(namespace('libgeom2d'));
push(path,namespace('libgeom2d'));


var p0 = mkPoint(44.0,33.0);

var p1 = mkPoint(44.0,33.0);
//var p1 = mkPoint(1,2);

var p2 = mkPoint(-80,21.5);




var pnts = [p0,p1,p2];
var mindist = 0.001;
var g = groupPoints(pnts,mindist);
pgp(g,pnts);

	      

*/

