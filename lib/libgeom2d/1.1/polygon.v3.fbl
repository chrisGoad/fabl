


int function length(geom2d:Polygon pl)
{
    return length(pl.geom:boundary.geom:points);
}




geom2d:Polygon function mkPolygon(geom2d:Polyline ply)
{
   var geom2d:Polygon rs;
   rs = new(geom2d:Polygon);
   rs . geom:boundary = ply;
   return rs;
}




geom2d:Polygon function mkPolygon(SeqOf(geom2d:Point) pnts)
{
   return mkPolygon(mkPolyline(pnts));
}




geom2d:Box function bounds(geom2d:Polygon ply)
{
   var geom2d:Box bx;
   bx = ply.geom2d:boundingBox;
   if (nul(bx)) return bounds(ply.geom:boundary);
   return bx;
}


delegate(bounds[geom2d:Shape],bounds[geom2d:Polygon]);



void function extractPointSequences(geom2d:Polygon pg,SeqOf(SeqOf(geom2d:Point)) rs)
{
   var geom2d:Polyline ply,int ln,i;
   ply = pg.geom:boundary;
   push(rs, ply.geom:points);
}

delegate(extractPointSequences[geom2d:Shape,SeqOf(SeqOf(geom2d:Point))],
         extractPointSequences[geom2d:Polygon,SeqOf(SeqOf(geom2d:Point))]);



SeqOf(SeqOf(geom2d:Point)) function extractPointSequences(SeqOf(geom2d:Polygon) pgs)
{
   var SeqOf(SeqOf(geom2d:Point)) rs,geom2d:Polygon pg,geom2d:Polyline ply,int ln,i;
   rs = new(SeqOf(SeqOf(geom2d:Point)));
   ln = length(pgs);
   for (i=0;i<ln;i++) 
       {
	   pg = pgs[i];
	   ply = pg.geom:boundary;
	   push(rs, ply.geom:points);
	   }
   return rs;
}


SeqOf(geom2d:Polyline) function toPolylines(SeqOf(geom2d:Polygon) shps)
{
   var SeqOf(geom2d:Polyline) rs,int ln,i;
   rs = new(SeqOf(geom2d:Polyline));
   ln = length(shps);
   for (i=0;i<ln;i++) push(rs,shps[i].geom:boundary);
   return rs;
}




    
var Function(geom2d:Shape,geom2d:Shape) polygonsToPolylines;

geom2d:Shape function polygonsToPolylines(geom2d:Shape shp)
{
   var SeqOf(geom2d:Shape) els,rels,int i,ln,geom2d:Group gr,rs;
   if (hasType(shp,geom2d:Polyline)) return shp;
   if (hasType(shp,geom2d:Polygon)) 
      return (shp~geom2d:Polygon).geom:boundary;
   if (hasType(shp,geom2d:Group))
      {
	  gr = shp~geom2d:Group;
	  els = gr.geom:elements;
	  rels = new(SeqOf(geom2d:Shape));
	  ln = length(els);
	  for (i=0;i<ln;i++)
	      {
		  push(rels,polygonsToPolylines(els[i]));
		  }
	  rs = new(geom2d:Group);
	  rs . geom:elements = rels;
	  return rs~geom2d:Shape;
	  }
   return shp;
}



int function sumLengths(SeqOf(SeqOf(geom2d:Point)) psq)
{
   var int rs,i,ln;
   rs = 0;
   ln = length(psq);
   for (i=0;i<ln;i++) rs = rs + length(psq[i]);
   return rs;
}

double function closureGap(geom2d:Polygon pg)
{ 
    var geom2d:Polyline ply,int ln,SeqOf(geom2d:Point) pnts;
    ply = pg.geom:boundary;
    pnts = ply.geom:points;
	ln = length(pnts);
	if (ln >1)
	   return distance(pnts[0],pnts[ln-1]);
	return 0.0;
}


void function closePolygon(geom2d:Polygon pg,double d)
{
    var geom2d:Polyline ply,int ln,SeqOf(geom2d:Point) pnts,geom2d:Point p0,cp0,
	    double cd;
    ply = pg.geom:boundary;
    pnts = ply.geom:points;
	ln = length(pnts);
	cd = distance(pnts[0],pnts[ln-1]);
	if (ln < 2) return;
	if (cd == 0.0) return;
	p0 = pnts[0];
	cp0 = mkPoint(p0.geom:x,p0.geom:y);
	if (cd < d)
	   pnts[ln-1] = cp0; 
    else
	   push(pnts,cp0);
}

void function closePolygon(geom2d:Polygon pg)
{
   closePolygon(pg,epsilon);
}

	      
//877 848 0894
//1122
