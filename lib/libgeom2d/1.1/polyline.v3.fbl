// Polylines


int function length(geom2d:Polyline pl)
{
    return length(pl.geom:points);
}


geom2d:Polyline function mkPolyline(SeqOf(geom2d:Point) pnts)
{
   var geom2d:Polyline rs;
   rs = new(geom2d:Polyline);
   rs . geom:points = pnts;
   return rs;
}


geom2d:Box function bounds(geom2d:Polyline ply)
{
   var geom2d:Box bx;
   bx = ply.geom2d:boundingBox;
   if (nul(bx)) return bounds(ply.geom:points);
   return bx;
}


delegate(bounds[geom2d:Shape],bounds[geom2d:Polyline]);


geom2d:Shape function toShape(SeqOf(SeqOf(geom2d:Point)) spnts)
{
   var int ln,j,geom2d:Polyline ply,geom2d:Group rs,SeqOf(geom2d:Shape) plys;
   ln = length(spnts);
   if (ln == 1)
      {
	  ply = new(geom2d:Polyline);
	  ply . geom:points = spnts[0];
	  return ply~geom2d:Shape;
	  }
   else
      {
	  plys = new(SeqOf(geom2d:Shape));
	  for (j = 0;j<ln;j++)
	      {
		  ply = new(geom2d:Polyline);
		  ply . geom:points = spnts[j];
		  push(plys,ply);
		  }
	  rs = new(geom2d:Group);
	  rs . geom:elements = plys;
	  return rs~geom2d:Shape;
	  }
}



SeqOf(SeqOf(geom2d:Point)) function extractPointSequences(SeqOf(geom2d:Polyline) plys)
{
   var SeqOf(SeqOf(geom2d:Point)) rs,geom2d:Polyline ply,int ln,i;
   rs = new(SeqOf(SeqOf(geom2d:Point)));
   ln = length(plys);
   for (i=0;i<ln;i++) 
       {
	   ply = plys[i];
	   push(rs, (ply.geom:points)~SeqOf(geom2d:Point));
	   }
   return rs;
}


void function extractPointSequences(geom2d:Polyline ply,SeqOf(SeqOf(geom2d:Point)) rs)
{
	   push(rs, (ply.geom:points)~SeqOf(geom2d:Point));
}



delegate(extractPointSequences[geom2d:Shape,SeqOf(SeqOf(geom2d:Point))],
         extractPointSequences[geom2d:Polyline,SeqOf(SeqOf(geom2d:Point))]);

