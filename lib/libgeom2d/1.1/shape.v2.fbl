
var Function(geom2d:Box,geom2d:Shape) bounds;// delegated
var Function(void,geom2d:Shape,SeqOf(SeqOf(geom2d:Point))) extractPointSequences;// delegated
var Function(void,geom2d:Shape,SeqOf(double),double) xIntercepts;// delegated


SeqOf(SeqOf(geom2d:Point)) function extractPointSequences(geom2d:Shape shp)
{
   var SeqOf(SeqOf(geom2d:Point)) rs;
   rs = new(SeqOf(SeqOf(geom2d:Point)));
   extractPointSequences(shp,rs);
   return rs;
}




SeqOf(double) function xIntercepts(geom2d:Shape shp,double y)
{
   var SeqOf(double) rs;
   rs = new(SeqOf(double));
   xIntercepts(shp,rs,y);
   return sort:sortedValues(rs);
}

var Function(geom2d:Shape,geom2d:Shape,geom2d:Box) intersect;// delegated



var Function(geom2d:Box,geom2d:Shape) cacheBounds;

// careful: by caching bounds, one asserts that the underlying
// data is immutable

geom2d:Box function cacheBounds(geom2d:Shape shp)
{
   var geom2d:Box bx,geom2d:Group g,SeqOf(geom2d:Shape) els,int ln,i;
   bx = shp.geom2d:boundingBox;
   if (nnul(bx)) return bx;
   bx = bounds(shp);
   if (hasType(shp,geom2d:Polyline) || hasType(shp,geom2d:Point) || hasType(shp,geom2d:Box) ||
       hasType(shp,geom2d:Polygon) || hasType(shp,geom2d:Group)) 
	  shp.geom2d:boundingBox = bx;
   if (hasType(shp,geom2d:Group)) 
      {
	  g = shp ~ geom2d:Group;
	  els = g.geom:elements;
	  ln = length(els);
	  for (i=0;i<ln;i++) cacheBounds(els[i]);
	  }
   return bx;
}
// the nul properties follow the rule: pad doubles with nils for the extra word
void function representPoint2dAsSmallob()
{
   setTypeProperties(geom2d:Point,[geom:x,nil~Property,geom:y,nil~Property]);
}


var Function(void,geom2d:Group,double) closePolygons;
var Function(void,geom2d:Polygon,double) closePolygon;

void function closePolygons(geom2d:Shape g,double d)
{
   if (hasType(g,geom2d:Polygon)) closePolygon(g~geom2d:Polygon,d); else
   if (hasType(g,geom2d:Group)) closePolygons(g~geom2d:Group,d); 
}

var Function(void,geom2d:Group,double) closePolygonsAtFirstOpportunity;
var Function(void,geom2d:Polygon,double) closePolygonAtFirstOpportunity;

void function closePolygonsAtFirstOpportunity(geom2d:Shape g,double d)
{
   if (hasType(g,geom2d:Polygon)) closePolygonAtFirstOpportunity(g~geom2d:Polygon,d); else
   if (hasType(g,geom2d:Group)) closePolygonsAtFirstOpportunity(g~geom2d:Group,d); 
}


