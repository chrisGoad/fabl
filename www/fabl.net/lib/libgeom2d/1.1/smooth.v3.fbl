/*

 basic smoothing algorithm:  cruise along until divergence from straight exceeds a threshold,


Let d be the dirvergence threshold, and p0 be the first point. Consider q some
distance along the line. Suppose that the divergence has been within limits so far.
Now,suppose that q is the point of max divergence from some future chord p0->r;
Then the sin of angle A between p0->q and p0->r will exceed d/length(p0->q)
Conversely, for each following point r within arcsin(d/length(p0->q)), divergence
has not been exceeded. So, each point q along the line imposes a range of angles
within which the line can proceed without violation. The algorithm is just to keep
track of the max and min values of this angle. When exceeded, the polyline
up to the  point prior to the violation can be replaced by a chord.

*/

/* 
First, get out on the line to a distance greater than a threshold.




 First approximation: simply cruise a fixed distance along the line.

install('libgeom2d');
setHome('libgeom2d');

 */
// sp = starting point
 

 int function firstPointBeyond(SeqOf(geom2d:Point) pnts,int sp,double dst)
 {
   var double cd,int ci,ln,geom2d:Point cp,np;
   cp = pnts[sp];
   ln =  length(pnts);
   cd = 0.0;
   ci = sp + 1;
   while (ci < ln)
         {
		 np = pnts[ci];
		 if (distance(np,cp) >= dst) return ci;
		 ci++;
		 }
   return -1;
}

var refDirection = 0.0;

var minRelD = 0.0;
var maxRelD = 0.0;

int function firstDivergence(SeqOf(geom2d:Point) pnts,int spi,double div)
 {
   var geom2d:Point sp,cp,fb,int ci,fbi,ln,double allowedAngularDiv,
       cdir,adst,cdst,cmaxDir,cminDir,rmaxDir,rminDir;
   sp = pnts[spi];
   fbi = firstPointBeyond(pnts,spi,div*1.5);// to get a manageable refdirection
   if (fbi < 0) return -1;
   fb = pnts[fbi];
   refDirection = direction(sp,fb);
   allowedAngularDiv = asin(div/distance(sp,fb));
   maxRelD = allowedAngularDiv;
   minRelD = -allowedAngularDiv;
   // ok, now lets cruise
   ci = fbi + 1;
   ln = length(pnts);
   while (ci < ln)
         {
         cp = pnts[ci];
		 cdst = distance(sp,cp); 
		 // if we've returned back to the neighborhood of sp, ignore this point
         if (cdst > (div*1.5))
		    {
		    cdir = direction(sp,cp);
		    adst = angularDistance(cdir,refDirection);
		    if ((adst > maxRelD) || (adst < minRelD)) return ci;
            allowedAngularDiv = asin(div/cdst); // from this chord
		    cmaxDir = cdir + allowedAngularDiv;// range established by this chord
		    cminDir = cdir - allowedAngularDiv;
		    rmaxDir = angularDistance(cmaxDir,refDirection);
		    rminDir = angularDistance(cminDir,refDirection);
		    if (rmaxDir < maxRelD) maxRelD = rmaxDir;
		    if (rminDir > minRelD) minRelD = rminDir;
			}
		 ci++;
		 }
   if (ci == ln) return -1;
}





SeqOf(geom2d:Point) function smooth(SeqOf(geom2d:Point) pnts,double div)
{
   var int ln,fd,geom2d:Point fp,SeqOf(geom2d:Point) rs;
   ln = length(pnts);
   if (ln < 3) return pnts;
   rs = new(SeqOf(geom2d:Point));
   fp = pnts[0];
   push(rs,fp);
   fd = firstDivergence(pnts,0,div);
   while (fd > 0)
      {
	  push(rs,pnts[fd-1]);
	  fd = firstDivergence(pnts,fd-1,div);
	  }
   push(rs,pnts[ln-1]);
   return rs;
}



SeqOf(SeqOf(geom2d:Point)) function smooth(SeqOf(SeqOf(geom2d:Point)) spnts,double div)
{
   var int ln,i,SeqOf(SeqOf(geom2d:Point))  rs;
   rs = new(SeqOf(SeqOf(geom2d:Point)));
   ln = length(spnts);
   for (i=0;i<ln;i++) push(rs,smooth(spnts[i],div));
   return rs;
}


/*

var pnts = 
[mkPoint(0,0),mkPoint(5,2),mkPoint(10,1),mkPoint(15,-1),mkPoint(20,-5),mkPoint(30,0),
mkPoint(30,50),mkPoint(31,60),mkPoint(30,90),mkPoint(40,90),mkPoint(50,90)];

firstDivergence(pnts,0,1);
firstDivergence(pnts,0,2);
firstDivergence(pnts,0,5);
smooth(pnts,6);



*/


/* not in use

 int function firstPointBeyondPathLength(SeqOf(geom2d:Point) pnts,int sp,double pl)
 {
   var double cd,int ci,ln,geom2d:Point cp,np;
   cp = pnts[sp];
   ln =  length(pnts);
   cd = 0.0;
   ci = sp + 1;
   while (ci < ln)
         {
		 np = pnts[ci];
		 cd = cd + distance(cp,np);
		 if (cd >= pl) return ci;
		 cp = np;
		 ci++;
		 }
   return -1;
}



var pnts = [mkPoint(0,0),mkPoint(1,0),mkPoint(2,0),mkPoint(3,0)];
firstPointBeyondPathLength(pnts,1,2.5);
var sp = 1;
var pl = 0.5;



load("{stdlibPrefix}discovery2.fb");


install('flash');
install('swfmap');
install('utm');
install('mapparams');
install('libmap');
push('libgeom2d');
push('mapparams');
push('libfeature');

var fts = 	 
load("file://H:/mapfab/data/utm14n/m50000/majorroads/t_725000_3475000.fb") ~ SeqOf(feature:Feature);

var plys = extractPolylines(fts);

SeqOf(SeqOf(geom2d:Point)) function pointSequences(SeqOf(geom2d:Polyline)   plys)
{
   var SeqOf(SeqOf(geom2d:Point)) rs,int i,ln;
   rs = new(SeqOf(SeqOf(geom2d:Point)));
   ln = length(plys);
   for (i=0;i<ln;i++)
	   push(rs,plys[i].geom:points);
   return rs;
}


var psqs = pointSequences(plys);

     libgeom2d:suture(psqs);
var	 stp = libgeom2d:suturedPaths();



int function totalLength(SeqOf(SeqOf(ob)) sqs)
{
   var int ln,i,rs;
   rs = 0;
   ln = length(sqs);
   for (i=0;i<ln;i++)
       {
	   rs = rs  + length(sqs[i]);
	   }
  return rs;
}

double function totalPathLength(SeqOf(SeqOf(geom2d:Point)) sqs)
{
   var int ln,i,double rs;
   rs = 0;
   ln = length(sqs);
   for (i=0;i<ln;i++)
       {
	   rs = rs  + pathLength(sqs[i]);
	   }
  return rs;
}

totalLength(psqs~SeqOf(SeqOf(ob)));
totalPathLength(psqs);

 var  lft = fts ~ SeqOf(feature:LinearFeature);
   writeln("Before  suture: ", libfeature:numParts(lft));
   coincidence_epsilon = 10.0;
   libfeature:suture(lft);
   writeln("After  suture: ", libfeature:numParts(lft));

var plys = extractPolylines(lft~SeqOf(feature:Feature));
var psqs = pointSequences(plys);
totalLength(psqs~SeqOf(SeqOf(ob)));
pathLength(psqs[10]);


var llft = removeIfShort(lft,1000);


*/





