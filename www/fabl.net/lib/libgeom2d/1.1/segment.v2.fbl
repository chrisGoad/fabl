
geom2d:LineSegment function mkSegment(geom2d:Point p,q)
{
    var geom2d:LineSegment rs;
	rs = new(geom2d:LineSegment);
	rs . geom:end0 = p;
	rs . geom:end1 = q;
	return rs;
}

geom2d:LineSegment function mkSegment(double px,py,qx,qy)
{
  var geom2d:Point p,q;
  p = mkPoint(px,py);
  q = mkPoint(qx,qy);
  return mkSegment(p,q);
}



void function times(string bf,geom2d:LineSegment sg)
{
   var geom2d:Point e0,e1;
   e0 = sg.geom:end0~geom2d:Point;
   e1 = sg.geom:end1~geom2d:Point;
   bf * "[[{e0.geom:x},{e1.geom:y}],[{e0.geom:x},{e1.geom:y}]]";

}

SeqOf(geom2d:Point) function points(geom2d:LineSegment sg)
{
   return [sg.geom:end0,sg.geom:end1];
}

double function length(geom2d:LineSegment sg)
{ 
   return distance(sg.geom:end0,sg.geom:end1);
}


geom2d:Box function bounds(geom2d:LineSegment sg)
{
  var geom2d:Box rs;
  rs = mkBox(sg.geom:end0);
  expandToContain(rs,sg.geom:end1);
  return rs;
}

delegate(bounds[geom2d:Shape],bounds[geom2d:LineSegment]);


boolean function pointOnLineIsWithinSegment(geom2d:LineSegment ln,geom2d:Point p)
{
   var geom2d:Point e0,e1,v,p1,p2;
   e0 = ln.geom:end0;
   e1 = ln.geom:end1;
   v = e1 - e0;
   p1 = p - e0;
   if ((p1 * v) < 0) return false;
   p2 = e1 - p;
   if ((p2 * v) < 0) return false;
   return true;
}


geom2d:Point function intersect(geom2d:LineSegment a,b)
{
   var geom2d:Line lna,lnb,geom2d:Point rs,a0,a1,b0,b1,double aln,bln,a0b0;
   a0 = a.geom:end0;
   a1 = a.geom:end1;
   b0 = b.geom:end0;
   b1 = b.geom:end1;
   aln = distance(a0,a1);
   bln = distance(b0,b1);
   a0b0 = distance(a0,b0);
   if (a0b0 > (aln + bln)) return nil~geom2d:Point; // quick filter
   lna = mkLine(a);
   lnb = mkLine(b);
   rs = intersect(lna,lnb);
   if (nul(rs)) return rs;
   if (pointOnLineIsWithinSegment(a,rs) && pointOnLineIsWithinSegment(b,rs)) return rs;
   return nil~geom2d:Point;
}

// does any point on a lie within d of any point on b?

boolean function distanceLessP(geom2d:LineSegment a,geom2d:LineSegment b,double d)
{
  var geom2d:Box bxa,bxb,geom2d:Point a0,a1,b0,b1,na0,na1,nb0,nb1,geom2d:Line aln,bln;
  // first a quick bounds filter
  bxa = expandAbs(bounds(a),d,d);
  bxb = expandAbs(bounds(b),d,d);
  if (not(intersects(bxa,bxb))) return false;
  if (nnul(intersect(a,b))) return true;
  a0 = a.geom:end0;
  a1 = a.geom:end1;
  b0 = b.geom:end0;
  b1 = b.geom:end1;
  if (distance(a0,b0) < d) return true;
  if (distance(a0,b1) < d) return true;
  if (distance(a1,b0) < d) return true;
  if (distance(a1,b1) < d) return true;
  bln = mkLine(b);
  na0 = nearestPoint(bln,a0);
  if (pointOnLineIsWithinSegment(b,na0) && (distance(na0,a0) < d)) return true;
  na1 = nearestPoint(bln,a1);
  if (pointOnLineIsWithinSegment(b,na1) && (distance(na1,a1) < d)) return true;
  aln = mkLine(a);
  nb0 = nearestPoint(aln,b0);
  if (pointOnLineIsWithinSegment(a,nb0) && (distance(nb0,b0) < d)) return true;
  nb1 = nearestPoint(aln,b1);
  if (pointOnLineIsWithinSegment(a,nb1) && (distance(nb1,b1) < d)) return true;
  return false;
}

geom2d:Point function center(geom2d:LineSegment sg)
{
  var geom2d:Point e0,e1;
  e0 = sg.geom:end0;
  e1 = sg.geom:end1;
  return 0.5 * (e0 + e1);
}


/*

var a = mkSegment(mkPoint(-1,0),mkPoint(1,0));
var b = mkSegment(mkPoint(0,-10),mkPoint(0,-0.2));
var d = 0.25;
distanceLessP(a,b,d);


*/

