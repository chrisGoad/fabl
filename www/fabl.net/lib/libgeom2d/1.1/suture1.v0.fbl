/*
install('libgeom2d');
setHome('libgeom2d');
*/

// new improved suturing
allocate("libgeom2d:nextPoint",FunctionalProperty);
libgeom2d:nextPoint .rdfs:range = geom2d:Point;
allocate("libgeom2d:previousPoint",FunctionalProperty);
libgeom2d:previousPoint .rdfs:range = geom2d:Point;
allocate("libgeom2d:otherEnd",FunctionalProperty);
libgeom2d:otherEnd .rdfs:range = geom2d:Point;
allocate("libgeom2d:sutureBooles",FunctionalProperty);
libgeom2d:sutureBooles .rdfs:range = int;


boolean function sutureIsInternal(geom2d:Point p)
{
   return nnul(p.nextPoint) && nnul(p.previousPoint);
}


boolean function sutureIsIsolated(geom2d:Point p)
{
   return nul(p.nextPoint) && nul(p.previousPoint);
}


boolean function sutureIsLeftEnd(geom2d:Point p)
{
   return nnul(p.nextPoint) && nul(p.previousPoint);
}



boolean function sutureIsRightEnd(geom2d:Point p)
{
   return nul(p.nextPoint) && nnul(p.previousPoint);
}


boolean function sutureIsEnd(geom2d:Point p)
{
   return nnul(p.otherEnd);
}


var suturePoints = new(SeqOf(geom2d:Point));
void function setupForSuture(SeqOf(geom2d:Point) startPoints,endPoints)
{
    var int ln,i,geom2d:Point sp,ep;
    ln = length(startPoints);
	for (i=0;i<ln;i++)
	    {
		sp = startPoints[i];
		ep =endPoints[i];
		sp . nextPoint = ep;
		ep . previousPoint = sp;
		sp . otherEnd = ep;
		ep . otherEnd = sp;
		}
}


void function setupForSuture(SeqOf(geom2d:Point) pnts)
{
    var int ln,i,geom2d:Point sp,ep;
    ln = length(pnts);
	for (i=0;i<ln-1;i++)
	    {
		sp = pnts[i];
		ep =pnts[i+1];
		sp . nextPoint = ep;
		ep . previousPoint = sp;
		}
    sp =  pnts[0];
	ep = pnts[ln-1];
    sp . otherEnd = ep;
    ep . otherEnd = sp;
}




void function setupForSuture(SeqOf(SeqOf(geom2d:Point)) spnts)
{
    var int ln,i;
    ln = length(spnts);
	for (i=0;i<ln;i++) setupForSuture(spnts[i]);
}


var sutureIsolatedPoints =new(SeqOf(geom2d:Point));
var sutureRedundantPoints =new(SeqOf(geom2d:Point));

//var q = p2;

geom2d:Point function sutureReversePoints(geom2d:Point q)
{
   var geom2d:Point cp,np,nnp;
   if (nul(q.nextPoint))  
      {
	  cp = q;
	  np = cp.previousPoint;
	  cp . previousPoint = nil ~ geom2d:Point;
	  while (nnul(np))
	       {
		   cp . nextPoint = np;
		   nnp = np . previousPoint;
		   np . previousPoint = cp;
		   cp = np;
		   np = nnp;
		   }
	   cp . nextPoint = nil ~ geom2d:Point;
	   return cp;
	   }
   if (nul(q.previousPoint))  
      {
	  cp = q;
	  np = cp.nextPoint;
	  cp . nextPoint = nil ~ geom2d:Point;
	  while (nnul(np))
	       {
		   cp . previousPoint = np;
		   nnp = np . nextPoint;
		   np . nextPoint = cp;
		   cp = np;
		   np = nnp;
		   }
	   cp . previousPoint = nil ~ geom2d:Point;
	   return cp;
	   }
}

SeqOf(geom2d:Point) function sutureTraverse(geom2d:Point p)
{
    var SeqOf(geom2d:Point) rs,geom2d:Point np;
    rs = new(SeqOf(geom2d:Point));
	np = p . nextPoint;
	push(rs,p);
	if (nnul(np))
	   {
	   while (nnul(np))
	         {
			 push(rs,np);
			 np = np . nextPoint;
			 }
	   return rs;
	   }
   np = p . previousPoint;
  while (nnul(np))
	    {
	    push(rs,np);
	    np = np . previousPoint;
		}
	   return rs;
  }

SeqOf(geom2d:Point) function copyAndIsolate(SeqOf(geom2d:Point) pnts)
{
  var SeqOf(geom2d:Point) rs,int ln,i,geom2d:Point cp,np;
  rs = new(SeqOf(geom2d:Point));
  ln = length(pnts);
  for (i=0;i<ln;i++)
      {
	  cp = pnts[i];
	  cp . previousPoint = nil~geom2d:Point;
	  cp . nextPoint = nil ~geom2d:Point;
	  np = mkPoint(cp.geom:x,cp.geom:y);
	  push(rs,np);
	  }
   cp = pnts[0];
   cp . otherEnd = nil ~geom2d:Point;
   cp = pnts[ln-1];
   cp . otherEnd = nil ~geom2d:Point;

   return rs;
}


	  
  
int function sutureLength(geom2d:Point p)
{
    var int rs,geom2d:Point np;
	np = p . nextPoint;
	rs = 1;
	if (nnul(np))
	   {
	   while (nnul(np))
	         {
			 rs ++;
			 np = np . nextPoint;
			 }
	   return rs;
	   }
   np = p . previousPoint;
  while (nnul(np))
	    {
	    rs++;
	    np = np . previousPoint;
		}
	   return rs;
  }



geom2d:Point function leftEnd(geom2d:Point p)
{
    var geom2d:Point cp,pp;
    cp = p;
	pp = cp . previousPoint;
	while (nnul(pp))
	    {
		cp = pp;
		pp = cp .previousPoint;
		}
    return cp;
}


geom2d:Point function rightEnd(geom2d:Point p)
{
    var geom2d:Point cp,np;
    cp = p;
	np = cp . nextPoint;
	while (nnul(np))
	    {
		cp = np;
		np = cp .nextPoint;
		}
    return cp;
}






// assumes p is "right end and  q is a "left end" 
void function suture0(geom2d:Point p,q)
{
     var geom2d:Point prp,oep,oeq;
	 oep = p.otherEnd;
	 oeq = q.otherEnd;
	 prp = p.previousPoint;
	 prp . nextPoint = q;
	 q . previousPoint = prp;
	 p . otherEnd = nil ~ geom2d:Point;
	 q . otherEnd = nil ~ geom2d:Point;
	 p . previousPoint = nil ~ geom2d:Point;
	 oep . otherEnd = oeq;
	 oeq . otherEnd = oep;
	 push(sutureRedundantPoints,p);
}

// reverses q if necessary

void function suture1(geom2d:Point p,q)
{
     if ((!sutureIsEnd(p)) || (!sutureIsEnd(q))) return;
	 if (sutureIsRightEnd(p))
	    {
		if (sutureIsLeftEnd(q)) suture0(p,q);
		else
		   {
		   sutureReversePoints(q);
		   suture0(p,q);
		   }
		}
	 else
	    { // p is left end
		if (sutureIsRightEnd(q)) suture0(q,p);
		else
		   {
		   sutureReversePoints(q);
		   suture0(q,p);
		   }
		}
}


void function suture(geom2d:Point p,q)
{
   var int lnp,lnq;
   lnp = sutureLength(p);
   lnq = sutureLength(q);
   if (lnp >= lnq) suture1(p,q); else suture1(q,p);
}


// also excludes the other end of p, to avoid constructing loops
geom2d:Point function nearestPointOtherThan(SeqOf(geom2d:Point) pnts,geom2d:Point p)
{
   var int ln,i,geom2d:Point oep,rs,cp,double cd,md;
   oep = p.otherEnd;
   ln = length(pnts);
   rs = nil ~ geom2d:Point;
   for (i =0;i<ln;i++)
       {
	   cp = pnts[i];
	   if ((!eq(cp,p))&&(!eq(cp,oep)))
	      {

		  if (nul(rs))
		     {
			 rs = cp;
			 md = distance(cp,p);
			 }
		  else
		     {
			 cd = distance(cp,p);
			 if (cd < md)
			    {
				rs = cp;
				md = cd;
				}
		     }
		 }
	   }
   return rs;
}

var sutureVerbose = false;

void function sutureStep(libgeom2d:QuadRoot qrt,geom2d:Point p,double d)
{
   var SeqOf(geom2d:Point) pw,geom2d:Point op;
   if (sutureIsIsolated(p) || sutureIsInternal(p)) return;
   pw = pointsWithin(qrt,p,d);
   op = nearestPointOtherThan(pw,p);
   if (nnul(op))
      {
	  if (sutureIsIsolated(op) || sutureIsInternal(op)) return;
      if (sutureVerbose) writeln("Sutured lists of lengths: ",sutureLength(leftEnd(p))," and ",sutureLength(leftEnd(op)));
	  suture(p,op);
	  }
}

void function sutureStep(libgeom2d:QuadRoot qrt,SeqOf(geom2d:Point) pnts,double d,int i)
{
  sutureStep(qrt,pnts[i],d);
}

void function suture(libgeom2d:QuadRoot qrt,SeqOf(geom2d:Point) pnts,double d)
{
  var int ln,i;
  ln = length(pnts);
  for (i=0;i<ln;i++) sutureStep(qrt,pnts[i],d);
}


SeqOf(SeqOf(geom2d:Point)) function suturedSequences(SeqOf(geom2d:Point) pnts)
{
   var SeqOf(SeqOf(geom2d:Point)) rs,int ln,i,geom2d:Point cp,
       SeqOf(geom2d:Point) sq;
   rs = new(SeqOf(SeqOf(geom2d:Point)));
   ln = length(pnts);
   for (i = 0;i<ln;i++)
       {
	   cp = pnts[i];
	   if (sutureIsLeftEnd(cp) || sutureIsRightEnd(cp))
	      {
		  sq = sutureTraverse(cp);
		  if (sutureVerbose) writeln("  length ",length(sq));
		  push(rs,copyAndIsolate(sq));
		  }
	   }
   return rs;
}


		  


/*


var p0 = mkPoint(0,0);
var p1 = mkPoint(1,0);
var p2 = mkPoint(2,0);
setupForSuture([p0,p1,p2]);
//setupForSuture([p0,p2]);
var q2 = mkPoint(2,0);
var q3 = mkPoint(3,0);
var q4 = mkPoint(4,0);
setupForSuture([q2,q3,q4]);
//setupForSuture([q2,q4]);

sutureLength(p0);
sutureReversePoints(p2);
//sutureReversePoints(q2);
var p = p2;
var q = q2;
suture(p2,q2);
sutureTraverse(p0);

var apnts = [p0,p1,p2,q2,q3,q4];
suturedSequences(apnts);



sutureTraverse(p0);
sutureTraverse(p2);
sutureReversePoints(p2);
sutureTraverse(p0);
sutureTraverse(p2);
sutureReversePoints(p2);
sutureTraverse(p0);
sutureTraverse(p2);




*/

